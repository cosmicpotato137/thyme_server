# Generated by Django 4.2.9 on 2025-05-25 23:43

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Synonym',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='Word',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('word', models.CharField(max_length=255)),
                ('language', models.CharField(choices=[('en', 'English'), ('es', 'Spanish'), ('fr', 'French'), ('de', 'German'), ('it', 'Italian'), ('pt', 'Portuguese'), ('ru', 'Russian'), ('zh', 'Chinese'), ('ja', 'Japanese'), ('ko', 'Korean')], default='en', max_length=2)),
                ('difficulty', models.IntegerField(default=0)),
                ('strength', models.IntegerField(default=0)),
                ('p', models.FloatField(default=0.0)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('synonyms', models.ManyToManyField(blank=True, related_name='synonyms_of', through='words.Synonym', to='words.word')),
            ],
            options={
                'ordering': ['word'],
                'unique_together': {('word', 'language'), ('difficulty', 'language')},
            },
        ),
        migrations.AddField(
            model_name='synonym',
            name='synonym',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonyms_related', to='words.word'),
        ),
        migrations.AddField(
            model_name='synonym',
            name='word',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='synonym_words', to='words.word'),
        ),
        migrations.AlterUniqueTogether(
            name='synonym',
            unique_together={('word', 'synonym')},
        ),
    ]
